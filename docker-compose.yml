services:
  server:
    build:
      context: ./app/server
      dockerfile: Dockerfile
    container_name: server
    hostname: server
    restart: always
    command: poetry run uvicorn src.main:app --host 0.0.0.0 --port 8000
    env_file:
      - .env
    ports:
      - "8000:8000"
    networks:
      - my_network
    depends_on:
      - postgres
      - adminer

  client:
    build:
      context: ./app/client
      dockerfile: Dockerfile
    container_name: client
    hostname: client
    restart: always
    command: npm start
    ports:
      - "3000:3000"
    networks:
      - my_network

  nginx:
    image: nginx:1.26
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - server
      - client
    ports:
      - "80:80"
    networks:
      - my_network

  adminer:
    image: adminer:5.1.0
    container_name: adminer
    hostname: adminer
    restart: unless-stopped
    networks:
      - my_network
    ports:
      - "8080:8080"

  postgres:
    image: postgres:17.4
    container_name: postgres
    hostname: postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_PASSWORD: ${CONFIG__DATABASE__PASSWORD}
      POSTGRES_USER: ${CONFIG__DATABASE__USER}
      POSTGRES_DB: ${CONFIG__DATABASE__DATABASE}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${CONFIG__DATABASE__USER} -d ${CONFIG__DATABASE__DATABASE}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - my_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G

volumes:
  postgres_data:

networks:
  my_network:
    driver: bridge
